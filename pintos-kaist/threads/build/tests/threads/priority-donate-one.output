Kernel command line: -q run priority-donate-one
0 ~ 9fc00 1
100000 ~ 13e0000 1
Pintos booting with: 
	base_mem: 0x0 ~ 0x9fc00 (Usable: 639 kB)
	ext_mem: 0x100000 ~ 0x13e0000 (Usable: 19,328 kB)
Calibrating timer...  17,996,800 loops/s.
Boot complete.
Executing 'priority-donate-one':
(priority-donate-one) begin
(priority-donate-one) This thread should have priority 32.  Actual priority: 31.
(priority-donate-one) This thread should have priority 33.  Actual priority: 31.
(priority-donate-one) acquire2, acquire1 must already have finished, in that order.
(priority-donate-one) This should be the last line before finishing this test.
(priority-donate-one) end
Execution of 'priority-donate-one' complete.
Timer: 90 ticks
Thread: 0 idle ticks, 93 kernel ticks, 0 user ticks
Console: 776 characters output
(priority-donate-one) acquire1: got the lock
Kernel PANIC at ../../threads/synch.c:223 in lock_release(): assertion `lock_held_by_current_thread (lock)' failed.
Call stack: 0x8004213567 0x800420a0af 0x8004217b5c 0x80042071b7.
The `backtrace' program can make call stacks useful.
Read "Backtraces" in the "Debugging Tools" chapter
of the Pintos documentation for more information.
Timer: 108 ticks
Thread: 0 idle ticks, 108 kernel ticks, 0 user ticks
Console: 1